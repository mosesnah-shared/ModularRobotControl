%% Cleaning up + Environment Setup
clear; close all; clc;

% Change the matlab to current directory
cd(fileparts(matlab.desktop.editor.getActiveFilename));

% Add Explicit-MATLAB for visualization
% Activate setup Explicit-MATLAB
addpath( 'Explicit-MATLAB' );    
run('Explicit-MATLAB/setup.m');  % Replace 'myscript.m' with your actual script name

addpath( 'utils' );    

% Configure default figure properties
fig_config( 'fontSize', 20, 'markerSize', 10 )

tau_max = [ 320, 320, 176, 176, 110, 40, 40 ]';

% Figure directory for saving:
fig_dir = '../images/iiwa14_singularity_exploit/';

%% (1A) Read txt file

% Open the file
fid = fopen('../data/KUKAresult/iiwa14_singularity_exploit_heavy2.txt','r');
% Read using textscan with updated format
data = textscan(fid, ['Time: %fExternal Wrench' repmat(' %f', 1, 6) ...
                      ' External Torque' repmat(' %f', 1, 7) ...
                      ' Joint Angle' repmat(' %f', 1, 7)]);

% Close file
fclose(fid);

% Assign parsed data to named arrays
t_arr         = data{1};             % Time (Nx1)
ext_wrench    = [data{2:7}]';        % External Wrench (Nx6)
ext_torque    = [data{8:14}]';       % External Torque (Nx7)
joint_arr     = [data{15:21}]';      % Joint Angles (Nx7)

% Calculate the forward kinematics map to get the rotation matrix 
robot = iiwa14( 'high' );
robot.init( );

% In world frame
Nt = length( t_arr );

ext_wrench0 = zeros( size( ext_wrench ) );

for i = 1 : Nt
    tmpq = joint_arr( :, i );
    H = robot.getForwardKinematics( tmpq );
    R = H( 1:3, 1:3 );

    ext_wrench0( :, i ) = blkdiag( R, R ) * ext_wrench( :, i );
end


%% (1B) Plot the data for Force/Wrench

idx1 = 1300;
idx2 = 1700;

f = figure( ); 
a1 = subplot( 1, 2, 1, 'parent', f );
plot( a1, t_arr( idx1: idx2 ), ext_wrench0( 1:3, idx1:idx2 ) )
set( a1, 'xlim', [ t_arr( idx1 ), t_arr( idx2 ) ], 'xticklabel', [], 'fontsize', 40 )
ylabel( a1, 'Force (N)' )
legend( a1, '$F_x$', '$F_y$', '$F_z$', 'location', 'northeastoutside')

a2 = subplot( 1, 2, 2, 'parent', f );
plot( a2, t_arr( idx1: idx2 ), ext_wrench0( 4:6, idx1:idx2) )
set( a2, 'xlim', [ t_arr( idx1 ), t_arr( idx2 ) ], 'xticklabel', [], 'fontsize', 40 )
ylabel( a2, 'Torque (N$\cdot$m)' )
legend( a2, '$\tau_x$', '$\tau_y$', '$\tau_z$', 'location', 'northeastoutside')

han=axes(f,'visible','off'); 
han.XLabel.Visible='on';
xlabel(han,'Time (s)', 'fontsize', 40);

exportgraphics( f, [fig_dir, 'kin_exploit_wrench.pdf']);

%% (1C) Calculate the projected at singular configuration

joint_torque_sing = zeros( size( joint_arr ) );
qsing = [ 0.0,  1.1336,  0,   0., 0.0,  0.0, 0.0];
% JB = robot.getBodyJacobian( qsing, 7 );
JH = robot.getHybridJacobian( qsing );

for i = 1 : Nt
%     qtmp = joint_arr( :, i );
%     JH = robot.getHybridJacobian( qtmp );
%     joint_torque_sing( :, i ) = JB' * ext_wrench( :, i ); 
    joint_torque_sing( :, i ) = JH' * ext_wrench0( :, i ); 
end
f = figure( ); a1 = subplot( 1, 2, 1 );
plot( a1, t_arr( idx1:idx2 ), abs( ext_torque( :, idx1:idx2 )./tau_max*100 ) )
set( a1, 'xlim', [ t_arr( idx1 ), t_arr( idx2 ) ], 'ylim', [ 0, 100 ], 'ytick', 0:20:100, 'fontsize', 30, 'xticklabel', [] )
ylabel( 'Torque Saturation Rate (\%)', 'fontsize', 40 )
% Not at singular configuration
joint_torque_off = zeros( size( joint_arr ) );

qoff = [   -3.21, 46.19000, 17.52000, -87.16, -5.03, -37.73, 0.0] * pi/180;
JH = robot.getHybridJacobian( qoff );

for i = 1 : Nt
    joint_torque_off( :, i ) = JH' * ext_wrench0( :, i ); 
end
a2 = subplot( 1, 2, 2 );
plot( a2, t_arr( idx1:idx2 ), abs( joint_torque_off( :, idx1:idx2 )./tau_max*100 ) )
set( a2, 'xlim', [ t_arr( idx1 ), t_arr( idx2 ) ], 'ylim', [ 0, 100 ], 'ytick', 0:20:100, 'fontsize', 30, 'xticklabel', [] )

han=axes(f,'visible','off'); 
han.XLabel.Visible='on';
xlabel(han,'Time (s)', 'fontsize', 40);

exportgraphics( f, [fig_dir, 'kin_exploit_joint_torque.pdf']);
